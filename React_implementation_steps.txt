Complete Frontend Setup Guide for SecureFileVault
I'll guide you through setting up the React frontend application step by step. This guide assumes you've already deployed the backend infrastructure (Phases 1-4).
Prerequisites Check
Before starting, verify you have:
bashnode -v    # Should be 18+
pnpm -v    # Should be 9+
Step 1: Navigate and Initialize Frontend
From your project root:
bashcd File_Storing_And_Sharing_App/frontend
If you haven't initialized it yet (as mentioned in Phase 1), do so now:
bashpnpm create vite@latest . --template react
When prompted, confirm to proceed in the non-empty directory.
Step 2: Install Core Dependencies
Install all necessary packages:
bashpnpm install
pnpm add aws-amplify @aws-amplify/ui-react
pnpm add react-router-dom
pnpm add axios
Step 3: Get AWS Configuration Values
You need these values from your deployed backend. Run these commands from the infrastructure directory:
bashcd ../infrastructure

# Get all outputs
pnpm exec cdk deploy --all --outputs-file ../frontend/cdk-outputs.json
Or manually retrieve them:
bashaws cloudformation describe-stacks --stack-name AuthStack --query "Stacks[0].Outputs"
aws cloudformation describe-stacks --stack-name LambdaStack --query "Stacks[0].Outputs"
aws cloudformation describe-stacks --stack-name StorageStack --query "Stacks[0].Outputs"
You need:

UserPoolId
UserPoolClientId
IdentityPoolId
ApiUrl
FilesBucketName
AWS Region (e.g., us-east-1)

Step 4: Create AWS Configuration File
Create frontend/src/aws-config.js:
js// src/aws-config.js
export const awsConfig = {
  Auth: {
    region: 'us-east-1', // Replace with your region
    userPoolId: 'us-east-1_XXXXXXXXX', // Replace with your UserPoolId
    userPoolWebClientId: 'XXXXXXXXXXXXXXXXXXXXXXXXXX', // Replace with UserPoolClientId
    identityPoolId: 'us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', // Replace with IdentityPoolId
  },
  API: {
    endpoints: [
      {
        name: 'fileStorageAPI',
        endpoint: 'https://xxxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod', // Replace with ApiUrl
        region: 'us-east-1',
      },
    ],
  },
  Storage: {
    AWSS3: {
      bucket: 'securefile-vault-XXXXXXXXXXXX-us-east-1', // Replace with FilesBucketName
      region: 'us-east-1',
    },
  },
};
Replace all placeholder values with your actual AWS outputs.
Step 5: Configure Amplify in Main Entry Point
Update frontend/src/main.jsx:
jsx// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Amplify } from 'aws-amplify';
import App from './App.jsx';
import './index.css';
import { awsConfig } from './aws-config.js';

// Configure Amplify
Amplify.configure({
  Auth: awsConfig.Auth,
  API: {
    endpoints: awsConfig.API.endpoints,
  },
});

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
Step 6: Create Authentication Context
Create frontend/src/context/AuthContext.jsx:
jsx// src/context/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { Auth } from 'aws-amplify';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkUser();
  }, []);

  const checkUser = async () => {
    try {
      const userData = await Auth.currentAuthenticatedUser();
      setUser(userData);
    } catch (error) {
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const signIn = async (email, password) => {
    try {
      const user = await Auth.signIn(email, password);
      setUser(user);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const signUp = async (email, password) => {
    try {
      await Auth.signUp({
        username: email,
        password,
        attributes: { email },
      });
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const signOut = async () => {
    try {
      await Auth.signOut();
      setUser(null);
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const confirmSignUp = async (email, code) => {
    try {
      await Auth.confirmSignUp(email, code);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  return (
    <AuthContext.Provider
      value={{ user, loading, signIn, signUp, signOut, confirmSignUp }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};
Step 7: Create API Service
Create frontend/src/services/api.js:
js// src/services/api.js
import { Auth, API } from 'aws-amplify';

const API_NAME = 'fileStorageAPI';

export const apiService = {
  async getAuthHeaders() {
    try {
      const session = await Auth.currentSession();
      const token = session.getIdToken().getJwtToken();
      return {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      };
    } catch (error) {
      console.error('Error getting auth headers:', error);
      throw error;
    }
  },

  async uploadFile(fileName, fileSize, fileType, tags = []) {
    const headers = await this.getAuthHeaders();
    const response = await API.post(API_NAME, '/files', {
      headers,
      body: { fileName, fileSize, fileType, tags },
    });
    return response;
  },

  async uploadComplete(fileId) {
    const headers = await this.getAuthHeaders();
    const response = await API.post(API_NAME, '/files/complete', {
      headers,
      body: { fileId },
    });
    return response;
  },

  async listFiles() {
    const headers = await this.getAuthHeaders();
    const user = await Auth.currentAuthenticatedUser();
    const userId = user.attributes.sub;
    const response = await API.get(API_NAME, `/files/list?userId=${userId}`, {
      headers,
    });
    return response;
  },

  async downloadFile(fileId) {
    const headers = await this.getAuthHeaders();
    const response = await API.get(API_NAME, `/files/${fileId}`, { headers });
    return response;
  },

  async deleteFile(fileId) {
    const headers = await this.getAuthHeaders();
    const response = await API.del(API_NAME, `/files/${fileId}`, { headers });
    return response;
  },

  async createShareLink(fileId, expiresInSeconds = 3600) {
    const headers = await this.getAuthHeaders();
    const response = await API.post(API_NAME, '/share/create', {
      headers,
      body: { fileId, expiresInSeconds },
    });
    return response;
  },
};
Step 8: Create Component Structure
Create the following directories:
bashmkdir -p src/components/Auth
mkdir -p src/components/Files
mkdir -p src/pages
Step 9: Create Login Component
Create frontend/src/components/Auth/Login.jsx:
jsx// src/components/Auth/Login.jsx
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

export const Login = ({ onToggleMode }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { signIn } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    const result = await signIn(email, password);
    if (!result.success) {
      setError(result.error);
    }
    setLoading(false);
  };

  return (
    <div style={{ maxWidth: '400px', margin: '50px auto', padding: '20px' }}>
      <h2>Sign In</h2>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: '15px' }}>
          <label>Email:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>Password:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        {error && <div style={{ color: 'red', marginBottom: '10px' }}>{error}</div>}
        <button
          type="submit"
          disabled={loading}
          style={{ width: '100%', padding: '10px', cursor: 'pointer' }}
        >
          {loading ? 'Signing in...' : 'Sign In'}
        </button>
      </form>
      <p style={{ marginTop: '20px', textAlign: 'center' }}>
        Don't have an account?{' '}
        <button
          onClick={onToggleMode}
          style={{ background: 'none', border: 'none', color: 'blue', cursor: 'pointer' }}
        >
          Sign Up
        </button>
      </p>
    </div>
  );
};
Step 10: Create SignUp Component
Create frontend/src/components/Auth/SignUp.jsx:
jsx// src/components/Auth/SignUp.jsx
import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';

export const SignUp = ({ onToggleMode }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [showVerification, setShowVerification] = useState(false);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { signUp, confirmSignUp } = useAuth();

  const handleSignUp = async (e) => {
    e.preventDefault();
    setError('');

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (password.length < 8) {
      setError('Password must be at least 8 characters');
      return;
    }

    setLoading(true);
    const result = await signUp(email, password);
    if (result.success) {
      setShowVerification(true);
    } else {
      setError(result.error);
    }
    setLoading(false);
  };

  const handleVerify = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    const result = await confirmSignUp(email, verificationCode);
    if (result.success) {
      alert('Account verified! Please sign in.');
      onToggleMode();
    } else {
      setError(result.error);
    }
    setLoading(false);
  };

  if (showVerification) {
    return (
      <div style={{ maxWidth: '400px', margin: '50px auto', padding: '20px' }}>
        <h2>Verify Email</h2>
        <p>Please enter the verification code sent to {email}</p>
        <form onSubmit={handleVerify}>
          <div style={{ marginBottom: '15px' }}>
            <label>Verification Code:</label>
            <input
              type="text"
              value={verificationCode}
              onChange={(e) => setVerificationCode(e.target.value)}
              required
              style={{ width: '100%', padding: '8px', marginTop: '5px' }}
            />
          </div>
          {error && <div style={{ color: 'red', marginBottom: '10px' }}>{error}</div>}
          <button
            type="submit"
            disabled={loading}
            style={{ width: '100%', padding: '10px', cursor: 'pointer' }}
          >
            {loading ? 'Verifying...' : 'Verify'}
          </button>
        </form>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: '400px', margin: '50px auto', padding: '20px' }}>
      <h2>Sign Up</h2>
      <form onSubmit={handleSignUp}>
        <div style={{ marginBottom: '15px' }}>
          <label>Email:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>Password:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>Confirm Password:</label>
          <input
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            style={{ width: '100%', padding: '8px', marginTop: '5px' }}
          />
        </div>
        {error && <div style={{ color: 'red', marginBottom: '10px' }}>{error}</div>}
        <button
          type="submit"
          disabled={loading}
          style={{ width: '100%', padding: '10px', cursor: 'pointer' }}
        >
          {loading ? 'Creating account...' : 'Sign Up'}
        </button>
      </form>
      <p style={{ marginTop: '20px', textAlign: 'center' }}>
        Already have an account?{' '}
        <button
          onClick={onToggleMode}
          style={{ background: 'none', border: 'none', color: 'blue', cursor: 'pointer' }}
        >
          Sign In
        </button>
      </p>
    </div>
  );
};
Step 11: Create File Upload Component
Create frontend/src/components/Files/FileUpload.jsx:
jsx// src/components/Files/FileUpload.jsx
import React, { useState } from 'react';
import { apiService } from '../../services/api';
import axios from 'axios';

export const FileUpload = ({ onUploadComplete }) => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState('');

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024 * 1024) {
        setError('File size exceeds 5GB limit');
        return;
      }
      setSelectedFile(file);
      setError('');
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) return;

    setUploading(true);
    setError('');
    setProgress(0);

    try {
      // Step 1: Request presigned URL
      const { fileId, uploadUrl } = await apiService.uploadFile(
        selectedFile.name,
        selectedFile.size,
        selectedFile.type
      );

      // Step 2: Upload file directly to S3
      await axios.put(uploadUrl, selectedFile, {
        headers: { 'Content-Type': selectedFile.type },
        onUploadProgress: (progressEvent) => {
          const percent = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          setProgress(percent);
        },
      });

      // Step 3: Notify backend upload is complete
      await apiService.uploadComplete(fileId);

      setSelectedFile(null);
      setProgress(0);
      alert('File uploaded successfully!');
      if (onUploadComplete) onUploadComplete();
    } catch (err) {
      console.error('Upload error:', err);
      setError(err.message || 'Upload failed');
    } finally {
      setUploading(false);
    }
  };

  return (
    <div style={{ padding: '20px', border: '1px solid #ccc', borderRadius: '5px' }}>
      <h3>Upload File</h3>
      <input
        type="file"
        onChange={handleFileSelect}
        disabled={uploading}
        style={{ marginBottom: '10px' }}
      />
      {selectedFile && (
        <p>
          Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
        </p>
      )}
      {error && <div style={{ color: 'red', marginBottom: '10px' }}>{error}</div>}
      {uploading && (
        <div style={{ marginBottom: '10px' }}>
          <div
            style={{
              width: '100%',
              backgroundColor: '#f0f0f0',
              borderRadius: '5px',
              overflow: 'hidden',
            }}
          >
            <div
              style={{
                width: `${progress}%`,
                backgroundColor: '#4CAF50',
                height: '20px',
                transition: 'width 0.3s',
              }}
            />
          </div>
          <p>{progress}%</p>
        </div>
      )}
      <button
        onClick={handleUpload}
        disabled={!selectedFile || uploading}
        style={{ padding: '10px 20px', cursor: 'pointer' }}
      >
        {uploading ? 'Uploading...' : 'Upload'}
      </button>
    </div>
  );
};
Step 12: Create File List Component
Create frontend/src/components/Files/FileList.jsx:
jsx// src/components/Files/FileList.jsx
import React, { useState, useEffect } from 'react';
import { apiService } from '../../services/api';

export const FileList = ({ refreshTrigger }) => {
  const [files, setFiles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    loadFiles();
  }, [refreshTrigger]);

  const loadFiles = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await apiService.listFiles();
      setFiles(response.items || []);
    } catch (err) {
      console.error('Error loading files:', err);
      setError('Failed to load files');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (fileId, fileName) => {
    try {
      const { downloadUrl } = await apiService.downloadFile(fileId);
      window.open(downloadUrl, '_blank');
    } catch (err) {
      alert('Download failed: ' + err.message);
    }
  };

  const handleDelete = async (fileId) => {
    if (!confirm('Are you sure you want to delete this file?')) return;

    try {
      await apiService.deleteFile(fileId);
      alert('File deleted successfully');
      loadFiles();
    } catch (err) {
      alert('Delete failed: ' + err.message);
    }
  };

  if (loading) return <div>Loading files...</div>;
  if (error) return <div style={{ color: 'red' }}>{error}</div>;

  return (
    <div style={{ marginTop: '20px' }}>
      <h3>Your Files ({files.length})</h3>
      {files.length === 0 ? (
        <p>No files uploaded yet</p>
      ) : (
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead>
            <tr style={{ borderBottom: '2px solid #ccc' }}>
              <th style={{ padding: '10px', textAlign: 'left' }}>Name</th>
              <th style={{ padding: '10px', textAlign: 'left' }}>Size</th>
              <th style={{ padding: '10px', textAlign: 'left' }}>Type</th>
              <th style={{ padding: '10px', textAlign: 'left' }}>Uploaded</th>
              <th style={{ padding: '10px', textAlign: 'left' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {files.map((file) => (
              <tr key={file.fileId} style={{ borderBottom: '1px solid #eee' }}>
                <td style={{ padding: '10px' }}>{file.fileName}</td>
                <td style={{ padding: '10px' }}>
                  {(file.fileSize / 1024 / 1024).toFixed(2)} MB
                </td>
                <td style={{ padding: '10px' }}>{file.fileType}</td>
                <td style={{ padding: '10px' }}>
                  {new Date(file.uploadedAt).toLocaleString()}
                </td>
                <td style={{ padding: '10px' }}>
                  <button
                    onClick={() => handleDownload(file.fileId, file.fileName)}
                    style={{ marginRight: '10px', cursor: 'pointer' }}
                  >
                    Download
                  </button>
                  <button
                    onClick={() => handleDelete(file.fileId)}
                    style={{ cursor: 'pointer', color: 'red' }}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};
Step 13: Create Dashboard Page
Create frontend/src/pages/Dashboard.jsx:
jsx// src/pages/Dashboard.jsx
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { FileUpload } from '../components/Files/FileUpload';
import { FileList } from '../components/Files/FileList';

export const Dashboard = () => {
  const { user, signOut } = useAuth();
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  const handleUploadComplete = () => {
    setRefreshTrigger((prev) => prev + 1);
  };

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '30px',
        }}
      >
        <h1>SecureFileVault Dashboard</h1>
        <div>
          <span style={{ marginRight: '15px' }}>
            {user?.attributes?.email || user?.username}
          </span>
          <button onClick={signOut} style={{ padding: '8px 16px', cursor: 'pointer' }}>
            Sign Out
          </button>
        </div>
      </div>

      <FileUpload onUploadComplete={handleUploadComplete} />
      <FileList refreshTrigger={refreshTrigger} />
    </div>
  );
};
Step 14: Create Auth Page
Create frontend/src/pages/AuthPage.jsx:
jsx// src/pages/AuthPage.jsx
import React, { useState } from 'react';
import { Login } from '../components/Auth/Login';
import { SignUp } from '../components/Auth/SignUp';

export const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);

  return (
    <div>
      {isLogin ? (
        <Login onToggleMode={() => setIsLogin(false)} />
      ) : (
        <SignUp onToggleMode={() => setIsLogin(true)} />
      )}
    </div>
  );
};
Step 15: Update Main App Component
Replace frontend/src/App.jsx:
jsx// src/App.jsx
import React from 'react';
import { AuthProvider, useAuth } from './context/AuthContext';
import { AuthPage } from './pages/AuthPage';
import { Dashboard } from './pages/Dashboard';

function AppContent() {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <h2>Loading...</h2>
      </div>
    );
  }

  return user ? <Dashboard /> : <AuthPage />;
}

function App() {
  return (
    <AuthProvider>
      <AppContent />
    </AuthProvider>
  );
}

export default App;
Step 16: Update CSS (Optional)
Replace frontend/src/index.css with basic styling:
css/* src/index.css */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f5f5f5;
}

button {
  font-family: inherit;
}

input {
  font-family: inherit;
}
Step 17: Configure Vite for Development
Update frontend/vite.config.js:
js// vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    open: true,
  },
});
Step 18: Run the Development Server
From the frontend directory:
bashpnpm run dev
The application should open at http://localhost:5173.
Step 19: Test the Application

Sign Up: Create a new account with email and password
Verify: Check your email for the verification code (or use AWS Console to manually verify)
Sign In: Log in with your credentials
Upload: Select and upload a file
View: See your uploaded files in the list
Download: Click download to get a file
Delete: Remove a file

Troubleshooting Common Issues
CORS Errors
If you see CORS errors, ensure your API Gateway has CORS enabled. Re-run:
bashcd ../infrastructure
pnpm exec cdk deploy LambdaStack
Authentication Errors
Verify your aws-config.js has correct values:
bashaws cognito-idp describe-user-pool --user-pool-id YOUR_USER_POOL_ID
API Not Found
Check your API endpoint:
bashaws cloudformation describe-stacks --stack-name LambdaStack --query "Stacks[0].Outputs"
Module Not Found
Ensure all dependencies are installed:
bashpnpm install
Project Structure Summary
frontend/
├── src/
│   ├── components/
│   │   ├── Auth/
│   │   │   ├── Login.jsx
│   │   │   └── SignUp.jsx
│   │   └── Files/
│   │       ├── FileUpload.jsx
│   │       └── FileList.jsx
│   ├── context/
│   │   └── AuthContext.jsx
│   ├── pages/
│   │   ├── AuthPage.jsx
│   │   └── Dashboard.jsx
│   ├── services/
│   │   └── api.js
│   ├── aws-config.js
│   ├── App.jsx
│   ├── main.jsx
│   └── index.css
├── package.json
└── vite.config.js
You now have a fully functional React frontend running locally that connects to your AWS backend infrastructure. The application supports user authentication, file uploads, downloads, and deletion with a clean, simple interface.

// src/services/api.js
import { fetchAuthSession } from "aws-amplify/auth";
import { get, post, del } from "aws-amplify/api";

const API_NAME = "fileStorageAPI";

export const apiService = {
  async getAuthHeaders() {
    try {
      const session = await fetchAuthSession();
      const token = session.tokens?.idToken?.toString();
      if (!token) throw new Error("No auth token");
      return {
        Authorization: `Bearer ${token}`,
      };
    } catch (error) {
      console.error("Error getting auth headers:", error);
      throw error;
    }
  },

  async uploadFile(fileName, fileSize, fileType, tags = []) {
    const headers = await this.getAuthHeaders();
    const result = await post({
      apiName: API_NAME,
      path: "/files",
      options: {
        headers,
        body: { fileName, fileSize, fileType, tags },
      },
    }).response;
    return result.body.json();
  },

  async uploadComplete(fileId) {
    const headers = await this.getAuthHeaders();
    const result = await post({
      apiName: API_NAME,
      path: "/files/complete",
      options: {
        headers,
        body: { fileId },
      },
    }).response;
    return result.body.json();
  },

  async listFiles(userId) {
    const headers = await this.getAuthHeaders();
    const result = await get({
      apiName: API_NAME,
      path: `/files/list?userId=${userId}`,
      options: { headers },
    }).response;
    return result.body.json();
  },

  async downloadFile(fileId) {
    const headers = await this.getAuthHeaders();
    const result = await get({
      apiName: API_NAME,
      path: `/files/${fileId}`,
      options: { headers },
    }).response;
    return result.body.json();
  },

  async deleteFile(fileId) {
    const headers = await this.getAuthHeaders();
    const result = await del({
      apiName: API_NAME,
      path: `/files/${fileId}`,
      options: { headers },
    }).response;
    return result.body.json();
  },
};

// src/main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import { Amplify } from "aws-amplify";
import App from "./App.jsx";
import "./index.css";
import { awsConfig } from "./aws-config.js";

// Configure Amplify
Amplify.configure({
  Auth: {
    Cognito: {
      userPoolId: awsConfig.Auth.userPoolId,
      userPoolClientId: awsConfig.Auth.userPoolWebClientId,
      identityPoolId: awsConfig.Auth.identityPoolId,
    },
  },
  API: {
    REST: {
      fileStorageAPI: {
        endpoint: awsConfig.API.endpoints[0].endpoint,
        region: awsConfig.API.endpoints[0].region,
      },
    },
  },
});

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// src/aws-config.js
export const awsConfig = {
  Auth: {
    region: import.meta.env.VITE_APP_AWS_REGION, // Replace with your region
    userPoolId: import.meta.env.VITE_APP_AWS_USER_POOL_ID, // Replace with your UserPoolId
    userPoolWebClientId: import.meta.env.VITE_APP_AWS_USER_POOL_WEB_CLIENT_ID, // Replace with UserPoolClientId
    identityPoolId: import.meta.env.VITE_APP_AWS_IDENTITY_POOL_ID, // Replace with IdentityPoolId
  },
  API: {
    endpoints: [
      {
        name: "fileStorageAPI",
        endpoint: import.meta.env.VITE_APP_AWS_API_URL,
        region: "us-east-1",
      },
    ],
  },
  Storage: {
    AWSS3: {
      bucket: import.meta.env.VITE_APP_AWS_FILES_BUCKET_NAME, // Replace with your S3 bucket name
      region: "us-east-1",
    },
  },
};

// src/context/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from "react";
import {
  signIn as amplifySignIn,
  signUp as amplifySignUp,
  signOut as amplifySignOut,
  confirmSignUp as amplifyConfirmSignUp,
  getCurrentUser,
  fetchAuthSession,
} from "aws-amplify/auth";

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkUser();
  }, []);

  const checkUser = async () => {
    try {
      const currentUser = await getCurrentUser();
      setUser(currentUser);
    } catch (error) {
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const signIn = async (email, password) => {
    try {
      const result = await amplifySignIn({ username: email, password });
      await checkUser();
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const signUp = async (email, password) => {
    try {
      await amplifySignUp({
        username: email,
        password,
        options: {
          userAttributes: { email },
        },
      });
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const signOut = async () => {
    try {
      await amplifySignOut();
      setUser(null);
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  const confirmSignUp = async (email, code) => {
    try {
      await amplifyConfirmSignUp({ username: email, confirmationCode: code });
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  return (
    <AuthContext.Provider
      value={{ user, loading, signIn, signUp, signOut, confirmSignUp }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within AuthProvider");
  }
  return context;
};

// src/App.jsx
import React from "react";
import { AuthProvider, useAuth } from "./context/AuthContext";
import { AuthPage } from "./pages/AuthPage";
import { Dashboard } from "./pages/Dashboard";

function AppContent() {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100vh",
        }}
      >
        <h2>Loading...</h2>
      </div>
    );
  }

  return user ? <Dashboard /> : <AuthPage />;
}

function App() {
  return (
    <AuthProvider>
      <AppContent />
    </AuthProvider>
  );
}

export default App;

#!/usr/bin/env node
const cdk = require("aws-cdk-lib");
const { StorageStack } = require("../lib/storage-stack");
const { DatabaseStack } = require("../lib/database-stack");
const { AuthStack } = require("../lib/auth-stack");
const { LambdaStack } = require("../lib/lambda-stack");

const app = new cdk.App();

const infra = new cdk.Stack(app, "InfrastructureStack"); // optional top-level stack

const storage = new StorageStack(app, "StorageStack");
const database = new DatabaseStack(app, "DatabaseStack");
const auth = new AuthStack(app, "AuthStackV2");

// pass bucket and tables + userPool to Lambda stack
new LambdaStack(app, "LambdaStack", {
  filesBucket: storage.filesBucket,
  filesTable: database.filesTable,
  usersTable: database.usersTable,
  accessLogsTable: database.accessLogsTable,
  shareLinksTable: database.shareLinksTable,
  userPool: auth.userPool,
});

// infrastructure/lib/auth-stack.js
const cdk = require("aws-cdk-lib");
const cognito = require("aws-cdk-lib/aws-cognito");
const iam = require("aws-cdk-lib/aws-iam");

class AuthStack extends cdk.Stack {
  constructor(scope, id, props) {
    super(scope, id, props);

    // User Pool
    this.userPool = new cognito.UserPool(this, "UserPool", {
      userPoolName: "SecureFileVaultUserPool",
      selfSignUpEnabled: true,
      signInAliases: { email: true },
      standardAttributes: { email: { required: true, mutable: false } },
      passwordPolicy: {
        minLength: 8,
        requireLowercase: true,
        requireUppercase: true,
        requireDigits: true,
        requireSymbols: true,
      },
      accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
    });

    // User Pool Client (Web)
    this.userPoolClient = new cognito.UserPoolClient(this, "UserPoolClient", {
      userPool: this.userPool,
      generateSecret: false,
      authFlows: { userPassword: true, userSrp: true, refreshToken: true },
      supportedIdentityProviders: [
        cognito.UserPoolClientIdentityProvider.COGNITO,
      ],
    });

    // Create groups (Admin / PowerUser / Viewer)
    new cognito.CfnUserPoolGroup(this, "AdminGroup", {
      userPoolId: this.userPool.userPoolId,
      groupName: "Admin",
      description: "Administrator users with full access",
      precedence: 1,
    });
    new cognito.CfnUserPoolGroup(this, "PowerUserGroup", {
      userPoolId: this.userPool.userPoolId,
      groupName: "PowerUser",
      description: "Power users with upload and management capabilities",
      precedence: 2,
    });
    new cognito.CfnUserPoolGroup(this, "ViewerGroup", {
      userPoolId: this.userPool.userPoolId,
      groupName: "Viewer",
      description: "Read-only users",
      precedence: 3,
    });

    // Identity Pool (Cognito Federated Identities)
    const identityPool = new cognito.CfnIdentityPool(this, "IdentityPool", {
      identityPoolName: "SecureFileVaultIdentityPool",
      allowUnauthenticatedIdentities: false,
      cognitoIdentityProviders: [
        {
          clientId: this.userPoolClient.userPoolClientId,
          providerName: this.userPool.userPoolProviderName,
        },
      ],
    });

    // Authenticated role (assumed via web identity)
    const authenticatedRole = new iam.Role(this, "CognitoAuthenticatedRole", {
      assumedBy: new iam.FederatedPrincipal(
        "cognito-identity.amazonaws.com",
        {
          StringEquals: {
            "cognito-identity.amazonaws.com:aud": identityPool.ref,
          },
          "ForAnyValue:StringLike": {
            "cognito-identity.amazonaws.com:amr": "authenticated",
          },
        },
        "sts:AssumeRoleWithWebIdentity"
      ),
      description:
        "Role assumed by authenticated users from Cognito Identity Pool",
    });

    // Example least-privilege policy - give read to S3 bucket and DynamoDB access will be attached later
    authenticatedRole.addToPolicy(
      new iam.PolicyStatement({
        actions: ["s3:GetObject", "s3:ListBucket"],
        resources: [
          "arn:aws:s3:::securefile-vault-*",
          "arn:aws:s3:::securefile-vault-*/*",
        ],
      })
    );

    // Attach role to identity pool
    new cognito.CfnIdentityPoolRoleAttachment(
      this,
      "IdentityPoolRoleAttachment",
      {
        identityPoolId: identityPool.ref,
        roles: { authenticated: authenticatedRole.roleArn },
      }
    );

    // Outputs
    new cdk.CfnOutput(this, "UserPoolId", {
      value: this.userPool.userPoolId,
      exportName: "UserPoolIdV2",
    });
    new cdk.CfnOutput(this, "UserPoolClientId", {
      value: this.userPoolClient.userPoolClientId,
      exportName: "UserPoolClientIdV2",
    });
    new cdk.CfnOutput(this, "IdentityPoolId", {
      value: identityPool.ref,
      exportName: "IdentityPoolIdV2",
    });
  }
}

module.exports = { AuthStack };
